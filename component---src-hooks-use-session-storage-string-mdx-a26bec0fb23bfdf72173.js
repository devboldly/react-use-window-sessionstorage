(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{qVsW:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return u}));var a=n("Fcif"),l=n("+I+c"),i=(n("mXGw"),n("/FXl")),r=n("TjRS"),b=n("UmRq"),o=(n("aD51"),{});void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/hooks/useSessionStorageString.mdx"}});var s={_frontmatter:o},d=r.a;function u(e){var t=e.components,n=Object(l.a)(e,["components"]);return Object(i.b)(d,Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",null,"useSessionStorageString"),Object(i.b)("h2",{id:"description"},"Description"),Object(i.b)("p",null,"This hook gets and sets a ",Object(i.b)("inlineCode",{parentName:"p"},"string")," in ",Object(i.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage"},"sessionStorage"),". "),Object(i.b)("p",null,"Features synchronization across hooks sharing the same key name."),Object(i.b)("h2",{id:"usage"},"Usage"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx"},"import { useSessionStorageString } from 'react-use-window-sessionstorage';\n")),Object(i.b)("p",null,"In your function component:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx"},"const [value, setValue] = useSessionStorageString('favColor', 'cyan');\n")),Object(i.b)("p",null,"The hook takes a key name and an optional default value argument. The default value will be immediately written to sessionStorage and returned if no value is present already. Uses ",Object(i.b)("inlineCode",{parentName:"p"},"null")," when no default value is provided."),Object(i.b)("p",null,"Use ",Object(i.b)("inlineCode",{parentName:"p"},"value")," and ",Object(i.b)("inlineCode",{parentName:"p"},"setValue")," to read and write the value."),Object(i.b)("h3",{id:"additional-features"},"Additional Features"),Object(i.b)("p",null,"The hook provides additional features in its return array, should you be interested:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx"},"const [value, setValue, loading, available, reset] = useSessionStorageString('favColor', 'cyan');\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A ",Object(i.b)("inlineCode",{parentName:"li"},"loading")," value of ",Object(i.b)("inlineCode",{parentName:"li"},"true")," indicates that the value is being loaded from sessionStorage."),Object(i.b)("li",{parentName:"ul"},"An ",Object(i.b)("inlineCode",{parentName:"li"},"available")," value of ",Object(i.b)("inlineCode",{parentName:"li"},"true")," indicates that ",Object(i.b)("inlineCode",{parentName:"li"},"sessionStorage")," is supported and available for use. "),Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("inlineCode",{parentName:"li"},"reset()")," function sets the value back to the provided default, or ",Object(i.b)("inlineCode",{parentName:"li"},"null")," if none was given.")),Object(i.b)("h2",{id:"signature"},"Signature"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"useSessionStorageString(keyName: string, defaultValue?: string | null) => [string | null, (value: string | null) => void, boolean, () => void, () => void]")),Object(i.b)("h3",{id:"props"},"Props"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Prop"),Object(i.b)("th",{parentName:"tr",align:null},"Type"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"keyName"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"string")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},"Required.")," Key name to use in sessionStorage.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"defaultValue"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"string")," ","|"," ",Object(i.b)("inlineCode",{parentName:"td"},"null")),Object(i.b)("td",{parentName:"tr",align:null},"Optional. Provide a default ",Object(i.b)("inlineCode",{parentName:"td"},"string")," value when the key's value is not found in sessionStorage. Will be immediately written to sessionStorage if not present. Use ",Object(i.b)("inlineCode",{parentName:"td"},"null")," for no default.")))),Object(i.b)("h3",{id:"return"},"Return"),Object(i.b)("p",null,"The hook returns an array containing:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Index"),Object(i.b)("th",{parentName:"tr",align:null},"Name"),Object(i.b)("th",{parentName:"tr",align:null},"Type"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"0"),Object(i.b)("td",{parentName:"tr",align:null},"value"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"string")," ","|"," ",Object(i.b)("inlineCode",{parentName:"td"},"null")),Object(i.b)("td",{parentName:"tr",align:null},"The ",Object(i.b)("inlineCode",{parentName:"td"},"string")," value from sessionStorage, when ",Object(i.b)("inlineCode",{parentName:"td"},"loading")," is ",Object(i.b)("inlineCode",{parentName:"td"},"false"),". Will be the default value (or ",Object(i.b)("inlineCode",{parentName:"td"},"null")," if none provided) while loading is ",Object(i.b)("inlineCode",{parentName:"td"},"true"),". If ",Object(i.b)("inlineCode",{parentName:"td"},"null")," when not loading, the key was not found in sessionStorage.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"1"),Object(i.b)("td",{parentName:"tr",align:null},"setValue"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"(value: string")," ","|"," ",Object(i.b)("inlineCode",{parentName:"td"},"null) => void")),Object(i.b)("td",{parentName:"tr",align:null},"Sets the value in sessionStorage. Provide ",Object(i.b)("inlineCode",{parentName:"td"},"null")," to set it back to the default value. Providing ",Object(i.b)("inlineCode",{parentName:"td"},"null")," will delete the key from sessionStorage if the default value is ",Object(i.b)("inlineCode",{parentName:"td"},"null"),".")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"2"),Object(i.b)("td",{parentName:"tr",align:null},"loading"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"true")," while the value loads from sessionStorage, ",Object(i.b)("inlineCode",{parentName:"td"},"false")," otherwise.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"3"),Object(i.b)("td",{parentName:"tr",align:null},"available"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"true")," if sessionStorage is supported and available for use, ",Object(i.b)("inlineCode",{parentName:"td"},"false")," otherwise.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"4"),Object(i.b)("td",{parentName:"tr",align:null},"reset"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"() => void")),Object(i.b)("td",{parentName:"tr",align:null},"Reset the value to the default.")))),Object(i.b)("h2",{id:"example"},"Example"),Object(i.b)("div",{style:{border:"solid 2px #67788a",padding:"20px"}},Object(i.b)(b.a,{mdxType:"UseSessionStorageStringExample"})),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx"},"import * as React from 'react';\nimport { useSessionStorageString } from 'react-use-window-sessionstorage';\n\nexport function UseSessionStorageStringExample() {\n  const defaultValue = 'Zelda';\n  const [enteredValue, setEnteredValue] = React.useState('');\n  const [value, setValue, loading, available, reset] = useSessionStorageString('stringValue', defaultValue);\n  const [value2, setValue2, loading2] = useSessionStorageString('stringValue', defaultValue);\n\n  return (\n    <div>\n      {!loading && (\n        <div>\n          <div>\n            Key \"stringValue\":{' '}\n            <input\n              type=\"text\"\n              value={enteredValue}\n              onChange={e => setEnteredValue(e.target.value)}\n              onKeyPress={e => e.key === 'Enter' && setValue(enteredValue)}\n            />\n            <button onClick={() => setValue(enteredValue)}>Set</button>\n          </div>\n          <div>\n            <strong>Stored value:</strong> {value}\n          </div>\n        </div>\n      )}\n      <div>\n        <button onClick={() => reset()}>Reset \"stringValue\" to default</button>\n      </div>\n      <hr />\n      {!loading2 && <div>Another \"stringValue\" hook (different hook, will synchronize): {value2}</div>}\n    </div>\n  );\n}\n")))}void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/hooks/useSessionStorageString.mdx"}}),u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-hooks-use-session-storage-string-mdx-a26bec0fb23bfdf72173.js.map