{"version":3,"sources":["webpack:///../src/hooks/useSessionStorageItem.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","style","border","padding","isMDXComponent"],"mappings":"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","file":"component---src-hooks-use-session-storage-item-mdx-cc53c5757d872d748a18.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-use-window-sessionstorage/react-use-window-sessionstorage/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { UseSessionStorageItemExample } from '../__docz__/components/UseSessionStorageItemExample';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1>useSessionStorageItem</h1>\n    <h2 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h2>\n    <p>{`This hook gets and sets an item in `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage\"\n      }}>{`sessionStorage`}</a>{` using the provided encode and decode functions.`}</p>\n    <p>{`Features synchronization across hooks sharing the same key name.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Hooks for `}<a parentName=\"p\" {...{\n          \"href\": \"/react-use-window-sessionstorage/useSessionStorageBoolean\"\n        }}>{`boolean`}</a>{`, `}<a parentName=\"p\" {...{\n          \"href\": \"/react-use-window-sessionstorage/useSessionStorageNumber\"\n        }}>{`number`}</a>{`, and `}<a parentName=\"p\" {...{\n          \"href\": \"/react-use-window-sessionstorage/useSessionStorageString\"\n        }}>{`string`}</a>{` primitives are available. There is also a `}<a parentName=\"p\" {...{\n          \"href\": \"/react-use-window-sessionstorage/useSessionStorageObject\"\n        }}>{`hook for objects`}</a>{` that uses `}<a parentName=\"p\" {...{\n          \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"\n        }}>{`JSON string encoding`}</a>{`.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { useSessionStorageItem } from 'react-use-window-sessionstorage';\n`}</code></pre>\n    <p>{`In your function component:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const encode = value => JSON.stringify(value);\nconst decode = itemString => JSON.parse(itemString);\nconst [value, setValue] = useSessionStorageItem('name', 'Zelda', encode, decode);\n`}</code></pre>\n    <p>{`The hook takes a key name and a default value argument, which should be `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` when no default value is desired. When not `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{`, the default value will be immediately written to sessionStorage and returned if no value is present already.`}</p>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`setValue`}</inlineCode>{` to read and write the value.`}</p>\n    <p>{`Because sessionStorage accepts strings only, the value must be encoded and decoded as such using the encode and decode functions you provide.`}</p>\n    <h3 {...{\n      \"id\": \"additional-features\"\n    }}>{`Additional Features`}</h3>\n    <p>{`The hook provides additional features in its return array, should you be interested:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const [value, setValue, loading, available, reset, restore] = useSessionStorageItem('name', 'Zelda', encode, decode);\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`A `}<inlineCode parentName=\"li\">{`loading`}</inlineCode>{` value of `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{` indicates that the value is being loaded from sessionStorage.`}</li>\n      <li parentName=\"ul\">{`An `}<inlineCode parentName=\"li\">{`available`}</inlineCode>{` value of `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{` indicates that `}<inlineCode parentName=\"li\">{`sessionStorage`}</inlineCode>{` is supported and available for use. `}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`reset()`}</inlineCode>{` function sets the value back to the provided default, or `}<inlineCode parentName=\"li\">{`null`}</inlineCode>{` if none was given.`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`restore()`}</inlineCode>{` function retrieves the latest value from sessionStorage. Use this if the sessionStorage value changes outside of this hook and you need to restore it to the latest.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"signature\"\n    }}>{`Signature`}</h2>\n    <p><inlineCode parentName=\"p\">{`useSessionStorageItem(keyName: string, defaultValue: any | null, encode: (val: any | null) => string, decode: (itemString: string | null) => any | null) => [any | null, (value: any | null) => void, boolean, () => void, () => void]`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`keyName`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`Required.`}</strong>{` Key name to use in sessionStorage.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`defaultValue`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`any`}</inlineCode>{` `}{`|`}{` `}<inlineCode parentName=\"td\">{`null`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`Required.`}</strong>{` Provide a default value when the key's value is not found in sessionStorage. Will be immediately written to sessionStorage if not present. Use `}<inlineCode parentName=\"td\">{`null`}</inlineCode>{` for no default.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`encode`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(value: any) => string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`Required.`}</strong>{` Encode function for the value. Since sessionStorage uses strings only, all values must be encoded to a string.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`decode`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(itemString: string) => any`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`Required.`}</strong>{` Encode function for the item string in sessionStorage. Since sessionStorage uses strings only, all values must be decoded from a string.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"return\"\n    }}>{`Return`}</h3>\n    <p>{`The hook returns an array containing:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Index`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`0`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`value`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`any`}</inlineCode>{` `}{`|`}{` `}<inlineCode parentName=\"td\">{`null`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The value from sessionStorage, when `}<inlineCode parentName=\"td\">{`loading`}</inlineCode>{` is `}<inlineCode parentName=\"td\">{`false`}</inlineCode>{`. Will be the default value (or `}<inlineCode parentName=\"td\">{`null`}</inlineCode>{` if none provided) while loading is `}<inlineCode parentName=\"td\">{`true`}</inlineCode>{`. If `}<inlineCode parentName=\"td\">{`null`}</inlineCode>{` when not loading, the key was not found in sessionStorage.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`1`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setValue`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(value: any`}</inlineCode>{` `}{`|`}{` `}<inlineCode parentName=\"td\">{`null) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Sets the value in sessionStorage. Provide `}<inlineCode parentName=\"td\">{`null`}</inlineCode>{` to set it back to the default value. Providing `}<inlineCode parentName=\"td\">{`null`}</inlineCode>{` will delete the key from sessionStorage if the default value is `}<inlineCode parentName=\"td\">{`null`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`2`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`loading`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`true`}</inlineCode>{` while the value loads from sessionStorage, `}<inlineCode parentName=\"td\">{`false`}</inlineCode>{` otherwise.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`3`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`available`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`true`}</inlineCode>{` if sessionStorage is supported and available for use, `}<inlineCode parentName=\"td\">{`false`}</inlineCode>{` otherwise.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`4`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`reset`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`() => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Reset the value to the default.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`5`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`restore`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`() => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Retrieve the latest value from sessionStorage. Use this if the sessionStorage value changes outside of this hook and you need to restore it to the latest.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`The following example demonstrates a sessionStorage item with the key name `}<inlineCode parentName=\"p\">{`nameObj`}</inlineCode>{` and default `}<inlineCode parentName=\"p\">{`{ name: \"Zelda\" }`}</inlineCode>{` that uses\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"\n      }}><inlineCode parentName=\"a\">{`JSON.stringify()`}</inlineCode></a>{`\nand `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\"\n      }}><inlineCode parentName=\"a\">{`JSON.parse()`}</inlineCode></a>{` to\nconvert the object to and from a `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{` for use in sessionStorage (the same can be accomplished using `}<a parentName=\"p\" {...{\n        \"href\": \"/react-use-window-sessionstorage/useSessionStorageObject\"\n      }}>{`useSessionStorageObject`}</a>{`).`}</p>\n    <p>{`A second hook with the same key name is shown as well. This hook will synchronize with the first one when changed.`}</p>\n    <div style={{\n      border: 'solid 2px #67788a',\n      padding: '20px'\n    }}>\n  <UseSessionStorageItemExample mdxType=\"UseSessionStorageItemExample\" />\n    </div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import * as React from 'react';\nimport { useSessionStorageItem } from 'react-use-window-sessionstorage';\n\nexport function UseSessionStorageItemExample() {\n  const defaultNameObject = { name: 'Zelda' };\n  const [enteredFirstName, setEnteredFirstName] = React.useState('');\n  const enteredNameObject = { name: enteredFirstName };\n  const encode = value => JSON.stringify(value);\n  const decode = itemString => JSON.parse(itemString);\n  const [nameObject, setNameObject, loading, available, reset] = useSessionStorageItem('nameObj', defaultNameObject, encode, decode);\n  const [nameObject2, setNameObject2, loading2] = useSessionStorageItem('nameObj', defaultNameObject, encode, decode);\n\n  return (\n    <div>\n      {!loading && (\n        <div>\n          <div>\n            Key \"nameObj\":{' { name: '}\n            <input\n              type=\"text\"\n              value={enteredFirstName}\n              onChange={e => setEnteredFirstName(e.target.value)}\n              onKeyPress={e => e.key === 'Enter' && setNameObject(enteredNameObject)}\n            />\n            {' } '}\n            <button onClick={() => setNameObject(enteredNameObject)}>Set</button>\n          </div>\n          <div>\n            <strong>Stored name:</strong> {JSON.stringify(nameObject)}\n          </div>\n        </div>\n      )}\n      <div>\n        <button onClick={() => reset()}>Reset \"nameObj\" to default</button>\n      </div>\n      <hr />\n      {!loading2 && <div>Another \"nameObj\" hook (different hook, will synchronize): {JSON.stringify(nameObject)}</div>}\n    </div>\n  );\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}