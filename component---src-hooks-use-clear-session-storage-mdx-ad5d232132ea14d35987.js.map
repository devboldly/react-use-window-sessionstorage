{"version":3,"sources":["webpack:///../src/hooks/useClearSessionStorage.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","style","border","padding","isMDXComponent"],"mappings":"mQASaA,G,UAAe,S,sNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,gDACA,kBACE,GAAM,eADR,eAGA,wCAAuB,iBAAGC,WAAW,IACjC,KAAQ,0EADW,0BAAvB,4BAEgE,0BAAYA,WAAW,KAAvB,kBAFhE,MAGA,oFAAmE,0BAAYA,WAAW,KAAvB,QAAnE,0BACA,kBACE,GAAM,SADR,SAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,gFAIL,oDACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,4DAIL,6BAAY,0BAAYA,WAAW,KAAvB,yBAAZ,6BACA,kBACE,GAAM,aADR,aAGA,qBAAG,0BAAYA,WAAW,KAAvB,6CACH,kBACE,GAAM,SADR,SAGA,iDACA,kBACE,GAAM,UADR,UAGA,qDAAoC,0BAAYA,WAAW,KAAvB,uBAApC,KACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,oCAIL,gGACA,kBACE,GAAM,WADR,WAGA,gFAA+D,0BAAYA,WAAW,KAAvB,KAA/D,yFAAsM,0BAAYA,WAAW,KAAvB,yBAAtM,qCACmB,0BAAYA,WAAW,KAAvB,0BADnB,+BAEA,mBAAKC,MAAO,CACVC,OAAQ,oBACRC,QAAS,SAEb,YAAC,IAAD,CAAiBJ,QAAQ,qBAEvB,uBAAK,oBAAMC,WAAW,MAClB,UAAa,gBADZ,w0C,oNAmDTJ,EAAWQ,gBAAiB","file":"component---src-hooks-use-clear-session-storage-mdx-ad5d232132ea14d35987.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-use-window-sessionstorage/react-use-window-sessionstorage/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { UseClearExample } from '../__docz__/components/UseClearExample';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1>useClearSessionStorage</h1>\n    <h2 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h2>\n    <p>{`This hook calls `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage\"\n      }}>{`sessionStorage.clear()`}</a>{` to clear all items from `}<inlineCode parentName=\"p\">{`sessionStorage`}</inlineCode>{`. `}</p>\n    <p>{`All hooks will be reset back to their default values, or to `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` if none was provided.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { useClearSessionStorage } from 'react-use-window-sessionstorage';\n`}</code></pre>\n    <p>{`In your function component:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const clearSessionStorage = useClearSessionStorage();\n`}</code></pre>\n    <p>{`Call `}<inlineCode parentName=\"p\">{`clearSessionStorage()`}</inlineCode>{` to clear sessionStorage.`}</p>\n    <h2 {...{\n      \"id\": \"signature\"\n    }}>{`Signature`}</h2>\n    <p><inlineCode parentName=\"p\">{`useClearSessionStorage() => (() => void)`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <p>{`The hook takes no props.`}</p>\n    <h3 {...{\n      \"id\": \"return\"\n    }}>{`Return`}</h3>\n    <p>{`The hook returns a function, `}<inlineCode parentName=\"p\">{`clearSessionStorage`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`clearSessionStorage() => void\n`}</code></pre>\n    <p>{`Calling this function clears sessionStorage and synchronizes all hooks.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`In the following example, four numbers are defaulted to `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{` and can be set to randomly generated values. The fifth value has no default. Calling `}<inlineCode parentName=\"p\">{`clearSessionStorage()`}</inlineCode>{` will clear\nsessionStorage using `}<inlineCode parentName=\"p\">{`sessionStorage.clear()`}</inlineCode>{` and synchronize all hooks.`}</p>\n    <div style={{\n      border: 'solid 2px #67788a',\n      padding: '20px'\n    }}>\n  <UseClearExample mdxType=\"UseClearExample\" />\n    </div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import * as React from 'react';\nimport { useClearSessionStorage, useSessionStorageNumber } from 'react-use-window-sessionstorage';\n\nexport function UseClearExample() {\n  const [val1, setVal1] = useSessionStorageNumber('val1', 0);\n  const [val2, setVal2] = useSessionStorageNumber('val2', 0);\n  const [val3, setVal3] = useSessionStorageNumber('val3', 0);\n  const [val4, setVal4] = useSessionStorageNumber('val4', 0);\n  const [val5, setVal5] = useSessionStorageNumber('val5');\n  const clearSessionStorage = useClearSessionStorage();\n\n  return (\n    <div>\n      <div>\n        <div>\n          <strong>Stored values:</strong>\n          <ul>\n            <li>val1: {val1}</li>\n            <li>val2: {val2}</li>\n            <li>val3: {val3}</li>\n            <li>val4: {val4}</li>\n            <li>val5 (no default): {val5}</li>\n          </ul>\n        </div>\n      </div>\n      <div>\n        <button\n          onClick={() => {\n            setVal1(Math.random());\n            setVal2(Math.random());\n            setVal3(Math.random());\n            setVal4(Math.random());\n            setVal5(Math.random());\n          }}\n        >\n          Generate Random Values\n        </button>\n      </div>\n      <div>\n        <button onClick={() => clearSessionStorage()}>Clear</button>\n      </div>\n    </div>\n  );\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}